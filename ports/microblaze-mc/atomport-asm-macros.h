#if !defined(ATOMPORT_ASM_MB_H__INCL__)
#define __ATOMPORT_ASM_MB_H__INCL__

/* 32 bit (4 byte) word indexes into the saved context
 * on the stack
 */
#define msr_idx  0
#define r1_idx   1
#define r2_idx   2
#define r3_idx   3
#define r4_idx   4
#define r5_idx   5
#define r6_idx   6
#define r7_idx   7
#define r8_idx   8
#define r9_idx   9
#define r10_idx  10
#define r11_idx  11
#define r12_idx  12
#define r13_idx  13
#define r14_idx  14
#define r15_idx  15
#define r16_idx  16
#define r17_idx  17
#define r18_idx  18
#define r19_idx  19
#define r20_idx  20
#define r21_idx  21
#define r22_idx  22
#define r23_idx  23
#define r24_idx  24
#define r25_idx  25
#define r26_idx  26
#define r27_idx  27
#define r28_idx  28
#define r29_idx  29
#define r30_idx  30
#define r31_idx  31

#define NUM_CTX_REGS        32

/* 32 bit (4 byte) word indexes into the interrupt saved context
 * on the stack; note that this is not the same as the initial
 * saved context because it is just the volatile registers, not
 * enough for a full context switch.
 */
#define msr_int_idx  0  /* Machine state register storage */
#define r3_int_idx   1  /* Volatile and Return */
#define r4_int_idx   2  /* Volatile and Return */
#define r5_int_idx   3  /* Volatile and Parameter */
#define r6_int_idx   4  /* Volatile and parameter */
#define r7_int_idx   5  /* Volatile and parameter */
#define r8_int_idx   6  /* Volatile and parameter */
#define r9_int_idx   7  /* Volatile and parameter */
#define r10_int_idx  8  /* Volatile and parameter */
#define r11_int_idx  9  /* Volatile */
#define r12_int_idx  10 /* Volatile */
#define r18_int_idx  11 /* Compiler and assembly temp */

#define NUM_INT_CTX_REGS    12
#define INT_CONTEXT_STORE_BYTES (NUM_INT_CTX_REGS * 4)

#if defined(__ASSEMBLY__)
/* Macro definitions for .S files */

#define EXTERN(sym) \
   .extern sym;

#define GLOBAL_FN(sym) \
   .global sym;
sym:


#define CONTEXT_STORE_BYTES (NUM_CTX_REGS * 4)

#define STORE_REG(reg, breg)               \
   swi reg, breg, (reg ## _idx) * 4

#define RESTORE_REG(reg, breg)             \
   lwi reg, breg, (reg ## _idx) * 4

#define INT_STORE_REG(reg, breg)           \
   swi reg, breg, (reg ## _int_idx) * 4

#define INT_RESTORE_REG(reg, breg)         \
   lwi reg, breg, (reg ## _int_idx) * 4

/* Save the volatile registers that the compiler will not know to save
 * Note: If using a stand-alone Xilinx MicroBlaze BSP generated by the
 * XSDK or Vitis, the initial interrupt handler that figures out what
 * vector to call already saves all of the volatile registers, so this
 * function is really not required.
 */
#define SAVE_INT_CONTEXT                        \
   addik r1, r1, -(INT_CONTEXT_STORE_BYTES);    \
   INT_STORE_REG(r3, r1);                       \
   INT_STORE_REG(r4, r1);                       \
   INT_STORE_REG(r5, r1);                       \
   INT_STORE_REG(r6, r1);                       \
   INT_STORE_REG(r7, r1);                       \
   INT_STORE_REG(r8, r1);                       \
   INT_STORE_REG(r9, r1);                       \
   INT_STORE_REG(r10, r1);                      \
   INT_STORE_REG(r11, r1);                      \
   INT_STORE_REG(r12, r1);                      \
   INT_STORE_REG(r18, r1);                      \
   mfs r18, rmsr;                               \
   swi r18, r1, (msr_int_idx * 4);              \
   INT_RESTORE_REG(r18, r1);

/* Restore the volatile registers saved by SAVE_INT_CONTEXT  */
#define RESTORE_INT_CONTEXT                   \
   INT_RESTORE_REG(r1, r1);                   \
   INT_RESTORE_REG(r3, r1);                   \
   INT_RESTORE_REG(r4, r1);                   \
   INT_RESTORE_REG(r5, r1);                   \
   INT_RESTORE_REG(r6, r1);                   \
   INT_RESTORE_REG(r7, r1);                   \
   INT_RESTORE_REG(r8, r1);                   \
   INT_RESTORE_REG(r9, r1);                   \
   INT_RESTORE_REG(r10, r1);                  \
   INT_RESTORE_REG(r11, r1);                  \
   INT_RESTORE_REG(r12, r1);                  \
   lwi r18, r1, (msr_int_idx * 4);            \
   mts rmsr, r18;                             \
   INT_RESTORE_REG(r18, r1);                  \
   addik r1, r1, INT_CONTEXT_STORE_BYTES

#endif /* defined(__ASSEMBLY__) */

#if !defined(__ASSEMBLY__)
/* C language macros  */

#include "mb_interface.h"       /* useful macros and defs */


#endif /* !defined(__ASSEMBLY__) */

#endif /* !defined(ATOMPORT_ASM_MB_H__INCL__) */
